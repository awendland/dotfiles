#!/bin/bash

# bash_prompt

# Example:
# awendland@host: ~/.dotfiles on master [+!?$]
# $

# Screenshot: http://i.imgur.com/DSJ1G.png
# iTerm2 prefs: import Solarized theme (disable bright colors for bold text)
# Color ref: http://vim.wikia.com/wiki/Xterm256_color_names_for_console_Vim
# More tips: http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html

# ----------------------------------------------------------------------
# | Colors                                                             |
# ----------------------------------------------------------------------

enable_color_support() {

    if [[ $COLORTERM == gnome-* && $TERM == xterm ]] && \
       infocmp gnome-256color &> /dev/null; then
        export TERM="gnome-256color"
    elif infocmp xterm-256color &> /dev/null; then
        export TERM="xterm-256color"
    fi

    if [ is_osx ]; then
        alias ls="ls -FAG" # or CLICOLOR=1

    elif [ is_ubuntu ]; then
        if [ -x /usr/bin/dircolors ]; then

            test -r ~/.dircolors \
                && eval "$(dircolors -b ~/.dircolors)" \
                || eval "$(dircolors -b)"

            alias dir="dir --color=auto"
            alias egrep="egrep --color=auto"
            alias fgrep="fgrep --color=auto"
            alias grep="grep --color=auto"
            alias ls="ls -FA --color=auto"
            alias vdir="vdir --color=auto"

        fi
    fi

}

set_ls_colors() {

    # There are several different implementations of color for ls:

    # ------------------------------------------------------------------
    # | FreeBSD / OS X                                                 |
    # ------------------------------------------------------------------

    #  - `ls` displays colors if the `-G` option is passed or if
    #    the `CLICOLOR` environment variable is set
    #
    #  - the actual colors are configured through the `LSCOLORS`
    #    environment variable (built-in defaults are used if this
    #    variable is not set)

    if [ "$OS" == "osx" ]; then

        LSCOLORS=""

        LSCOLORS+="gx" # Directory
        LSCOLORS+="fx" # Symbolic link
        LSCOLORS+="cx" # Socket
        LSCOLORS+="dx" # Pipe
        LSCOLORS+="cx" # Executable
        LSCOLORS+="eg" # Block special
        LSCOLORS+="ed" # Character special
        LSCOLORS+="ab" # Executable with setuid bit set
        LSCOLORS+="ag" # Executable with setgid bit set
        LSCOLORS+="cc" # Directory writable to others, with sticky bit
        LSCOLORS+="bd" # Directory writable to others, without sticky bit

        export LSCOLORS

    # ------------------------------------------------------------------
    # | GNU                                                            |
    # ------------------------------------------------------------------

    #  - `ls` displays colors if the `--color` option is passed
    #
    #  - the actual colors are configured through the `LS_COLORS`
    #    environment variable (built-in defaults are used if this
    #    variable is not set)

    elif [ "$OS" == "ubuntu" ]; then

        LS_COLORS=""

        LS_COLORS+="no=0;35:"   # global default
        LS_COLORS+="di=1;35:"   # directory
        LS_COLORS+="ex=0;32:"   # executable file
        LS_COLORS+="fi=0;35:"   # file
        LS_COLORS+="ec=:"       # non-filename text
        LS_COLORS+="mi=1;31:"   # non-existent file pointed to by a symlink
        LS_COLORS+="ln=target:" # symbolic link
        LS_COLORS+="or=31;01"   # symbolic link pointing to a non-existent file

        export LS_COLORS

    fi
}

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "$1$branchName$s"
    else
        return
    fi
}

set_prompts() {
    local black=""
    local blue=""
    local bold=""
    local cyan=""
    local green=""
    local orange=""
    local purple=""
    local red=""
    local reset=""
    local white=""
    local yellow=""

    local hostStyle=""
    local userStyle=""

    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        tput sgr0 # reset colors

        bold=$(tput bold)
        dim=$(tput dim)
        reset=$(tput sgr0)

        # Solarized colors
        # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
        black=$(tput setaf 0)
        blue=$(tput setaf 33)
        cyan=$(tput setaf 37)
        green=$(tput setaf 64)
        orange=$(tput setaf 166)
        purple=$(tput setaf 125)
        red=$(tput setaf 124)
        white=$(tput setaf 15)
        yellow=$(tput setaf 136)
    else
        bold=""
        dim="\e[2m"
        reset="\e[0m"

        black="\e[1;30m"
        blue="\e[1;34m"
        cyan="\e[1;36m"
        green="\e[1;32m"
        orange="\e[1;33m"
        purple="\e[1;35m"
        red="\e[1;31m"
        white="\e[1;37m"
        yellow="\e[1;33m"
    fi

    # build the prompt

    # logged in as root
    if [[ "$USER" == "root" ]]; then
        userStyle="\[$bold$red\]"
    else
        userStyle="\[$orange\]"
    fi

    # connected via ssh
    if [[ "$SSH_TTY" ]]; then
        hostStyle="\[$bold$red\]"
    else
        hostStyle="\[$yellow\]"
    fi

    # set the terminal title to the current working directory
    PS1="\[\033]0;\w\007\]"

    PS1+="\n" # newline
    # if in screen session
    if [[ "$STY" ]]; then
        PS1+="\[$dim\]screen\[$reset\] " # prefix with screen
    fi
    PS1+="\[$userStyle\]\u" # username
    PS1+="\[$reset$white\]@"
    PS1+="\[$hostStyle\]\h" # host
    PS1+="\[$reset$white\]: "
    PS1+="\[$green\]\w" # working directory
    PS1+="\$(prompt_git \"$white on $cyan\")" # git repository details
    PS1+="\n"
    PS1+="\[$reset$white\]\$ \[$reset\]" # $ (and reset color)

    export PS1
}

enable_color_support
set_ls_colors
unset -f enable_color_support
unset -f set_ls_colors

set_prompts
unset set_prompts